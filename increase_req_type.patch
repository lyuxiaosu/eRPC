diff --git a/c_interface/erpc_c_interface.cpp b/c_interface/erpc_c_interface.cpp
index 689327a6..2034a7f8 100644
--- a/c_interface/erpc_c_interface.cpp
+++ b/c_interface/erpc_c_interface.cpp
@@ -94,7 +94,7 @@ extern "C" {
 
 		return rpc->is_connected(session_num);
 	}
-	int erpc_register_req_func(uint8_t req_type, erpc_req_func_c req_func, int req_func_type) {
+	int erpc_register_req_func(uint16_t req_type, erpc_req_func_c req_func, int req_func_type) {
 		erpc::erpc_req_func_t rf = reinterpret_cast<erpc::erpc_req_func_t> (req_func);
 		return erpc_store->nexus_->register_req_func(req_type, rf, static_cast<erpc::ReqFuncType>(req_func_type)); 
 	}
diff --git a/c_interface/erpc_c_interface.h b/c_interface/erpc_c_interface.h
index b8c21a8f..884a98ee 100644
--- a/c_interface/erpc_c_interface.h
+++ b/c_interface/erpc_c_interface.h
@@ -41,7 +41,7 @@ typedef void (*erpc_cont_func_t)(void *context, void *tag);
  * rpc handler that will be called on the server side
  */
 #ifdef SLEDGE
-typedef void (*erpc_req_func_c)(void *req_handle, uint8_t req_type, uint8_t *msg, size_t size, uint16_t port);
+typedef void (*erpc_req_func_c)(void *req_handle, uint16_t req_type, uint8_t *msg, size_t size, uint16_t port);
 #else
 typedef void (*erpc_req_func_c)(void *req_handle, void *context);
 #endif
@@ -58,7 +58,7 @@ int erpc_run_event_loop(uint8_t rpc_id, size_t timeout_ms);
 void erpc_run_event_loop_once(uint8_t rpc_id);
 bool erpc_session_is_connected(uint8_t rpc_id, int session_num);
 
-int erpc_register_req_func(uint8_t req_type, erpc_req_func_c req_func, int req_func_type);
+int erpc_register_req_func(uint16_t req_type, erpc_req_func_c req_func, int req_func_type);
 
 int erpc_req_response_enqueue(uint8_t rpc_id, void *req_handle, char* content, size_t data_size, uint8_t response_code);
 
diff --git a/src/common.h b/src/common.h
index ba34f49b..55c9bac8 100644
--- a/src/common.h
+++ b/src/common.h
@@ -39,7 +39,7 @@ static constexpr bool kTesting = ERPC_TESTING;
 // General constants
 
 /// Array size to hold registered request handler functions
-static constexpr size_t kReqTypeArraySize = 1ull + UINT8_MAX;
+static constexpr size_t kReqTypeArraySize = 1ull + UINT16_MAX;
 
 static constexpr size_t kHugepageSize = (2 * 1024 * 1024);  ///< Hugepage size
 static constexpr size_t kMaxHostnameLen = 128;  ///< Max hostname length
@@ -48,7 +48,7 @@ static constexpr size_t kMaxIssueMsgLen =  ///< Max debug issue message length
 
 // Invalid values
 static constexpr uint8_t kInvalidRpcId = kMaxRpcId + 1;
-static constexpr uint8_t kInvalidReqType = kReqTypeArraySize - 1;
+static constexpr uint16_t kInvalidReqType = kReqTypeArraySize - 1;
 
 /// Invalid eRPC thread ID of a background thread
 static constexpr size_t kInvalidBgETid = kMaxBgThreads;
diff --git a/src/nexus.h b/src/nexus.h
index aceb8b99..b474c79c 100644
--- a/src/nexus.h
+++ b/src/nexus.h
@@ -56,7 +56,7 @@ class Nexus {
    *
    * @return 0 on success, negative errno on failure.
    */
-  int register_req_func(uint8_t req_type, erpc_req_func_t req_func,
+  int register_req_func(uint16_t req_type, erpc_req_func_t req_func,
                         ReqFuncType req_func_type = ReqFuncType::kForeground);
 
  private:
diff --git a/src/nexus_impl/nexus.cc b/src/nexus_impl/nexus.cc
index 18cf38b6..9fff7da8 100644
--- a/src/nexus_impl/nexus.cc
+++ b/src/nexus_impl/nexus.cc
@@ -140,7 +140,7 @@ void Nexus::unregister_hook(Hook *hook) {
   reg_hooks_lock_.unlock();
 }
 
-int Nexus::register_req_func(uint8_t req_type, erpc_req_func_t req_func,
+int Nexus::register_req_func(uint16_t req_type, erpc_req_func_t req_func,
                              ReqFuncType req_func_type) {
   char issue_msg[kMaxIssueMsgLen];  // The basic issue message
   sprintf(issue_msg,
diff --git a/src/nexus_impl/nexus_bg_thread.cc b/src/nexus_impl/nexus_bg_thread.cc
index cd5c5899..29bdf65c 100644
--- a/src/nexus_impl/nexus_bg_thread.cc
+++ b/src/nexus_impl/nexus_bg_thread.cc
@@ -27,7 +27,7 @@ void Nexus::bg_thread_func(BgThreadCtx ctx) {
 
       if (wi.is_req()) {
         SSlot *s = wi.sslot_;  // For requests, we have a valid sslot
-        uint8_t req_type = s->server_info_.req_type_;
+        uint16_t req_type = s->server_info_.req_type_;
         const ReqFunc &req_func = ctx.req_func_arr_->at(req_type);
 #ifdef SLEDGE
 	    uint8_t *msg = s->server_info_.req_msgbuf_.buf_;
diff --git a/src/pkthdr.h b/src/pkthdr.h
index fba4391f..8adfde2b 100644
--- a/src/pkthdr.h
+++ b/src/pkthdr.h
@@ -17,7 +17,7 @@ namespace erpc {
 // simplifies things by fitting the entire UDP header.
 static constexpr size_t kHeadroomHackBits = 16;
 
-static constexpr size_t kMsgSizeBits = 24;  ///< Bits for message size
+static constexpr size_t kMsgSizeBits = 16;  ///< Bits for message size
 static constexpr size_t kReqNumBits = 44;   ///< Bits for request number
 static constexpr size_t kPktNumBits = 14;   ///< Bits for packet number
 
@@ -25,7 +25,7 @@ static constexpr size_t kPktNumBits = 14;   ///< Bits for packet number
 /// pkthdr_t bitfields equal to 128 bits, which makes copying faster.
 static const size_t k_pkt_hdr_magic_bits =
     128 -
-    (kHeadroomHackBits + 8 + kMsgSizeBits + 16 + 2 + kPktNumBits + kReqNumBits);
+    (kHeadroomHackBits + 16 + kMsgSizeBits + 16 + 2 + kPktNumBits + kReqNumBits);
 static constexpr size_t kPktHdrMagic = 11;  ///< Magic number for packet headers
 
 static_assert(k_pkt_hdr_magic_bits == 4, "");  // Just to keep track
@@ -59,7 +59,7 @@ struct pkthdr_t {
   // On MSVC, these fields cannot use uint64_t. In the future, we can increase
   // the bits for msg_size_ by shrinking req_type_.
 
-  uint32_t req_type_ : 8;             /// RPC request type
+  uint32_t req_type_ : 16;             /// RPC request type
   uint32_t msg_size_ : kMsgSizeBits;  /// Req/resp msg size, excluding headers
   uint16_t dest_session_num_;  /// Session number of the destination endpoint
 
diff --git a/src/rpc.h b/src/rpc.h
index a51ae726..0162eca3 100644
--- a/src/rpc.h
+++ b/src/rpc.h
@@ -84,9 +84,11 @@ class Rpc {
 
  public:
   /// Max request or response *data* size, i.e., excluding packet headers
-  static constexpr size_t kMaxMsgSize =
+  /*static constexpr size_t kMaxMsgSize =
       HugeAlloc::k_max_class_size -
       ((HugeAlloc::k_max_class_size / TTr::kMaxDataPerPkt) * sizeof(pkthdr_t));
+  */
+  static constexpr size_t kMaxMsgSize = 65535;
   static_assert((1 << kMsgSizeBits) >= kMaxMsgSize, "");
   static_assert((1 << kPktNumBits) * TTr::kMaxDataPerPkt > 2 * kMaxMsgSize, "");
 
diff --git a/src/rpc_types.h b/src/rpc_types.h
index e381b384..6b59e811 100644
--- a/src/rpc_types.h
+++ b/src/rpc_types.h
@@ -35,7 +35,7 @@ class ReqHandle;
  * @param context The context that was used while creating the Rpc object
  */
 #ifdef SLEDGE
-typedef void (*erpc_req_func_t)(ReqHandle *req_handle, uint8_t req_type, uint8_t *msg, size_t size, uint16_t port);
+typedef void (*erpc_req_func_t)(ReqHandle *req_handle, uint16_t req_type, uint8_t *msg, size_t size, uint16_t port);
 #else
 typedef void (*erpc_req_func_t)(ReqHandle *req_handle, void *context);
 #endif
diff --git a/src/session.h b/src/session.h
index b7b406c8..a7a7dc88 100644
--- a/src/session.h
+++ b/src/session.h
@@ -19,7 +19,7 @@ namespace erpc {
 /// The arguments to enqueue_request()
 struct enq_req_args_t {
   int session_num_;
-  uint8_t req_type_;
+  uint16_t req_type_;
   MsgBuffer *req_msgbuf_;
   MsgBuffer *resp_msgbuf_;
   erpc_cont_func_t cont_func_;
@@ -27,7 +27,7 @@ struct enq_req_args_t {
   size_t cont_etid_;
 
   enq_req_args_t() {}
-  enq_req_args_t(int session_num, uint8_t req_type, MsgBuffer *req_msgbuf,
+  enq_req_args_t(int session_num, uint16_t req_type, MsgBuffer *req_msgbuf,
                  MsgBuffer *resp_msgbuf, erpc_cont_func_t cont_func, void *tag,
                  size_t cont_etid)
       : session_num_(session_num),
diff --git a/src/sslot.h b/src/sslot.h
index dcd82abc..84e74388 100644
--- a/src/sslot.h
+++ b/src/sslot.h
@@ -97,7 +97,7 @@ class SSlot {
       /// waiting for an enqueue_response(), from a foreground or a background
       /// thread. This property is needed to safely reset sessions, and it is
       /// difficult to establish with other members (e.g., the MsgBuffers).
-      uint8_t req_type_;
+      uint16_t req_type_;
       ReqFuncType req_func_type_;  ///< The req handler type (e.g., background)
 
       /// Number of pkts received. Pkts up to (num_rx - 1) have been received.
